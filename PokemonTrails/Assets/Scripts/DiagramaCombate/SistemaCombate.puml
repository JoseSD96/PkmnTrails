@startuml
class SistemaCombate {
    + pkmnJugador : PkmnCombate
    - pkmnJugadorHUD : CombateHUD
    - fondoCombate : GameObject
    + pkmnEnemigo : PkmnCombate
    - pkmnEnemigoHUD : CombateHUD
    - Atk1 : Button
    - Atk2 : Button
    - huirBtn : Button
    - capturarBtn : Button
    - audioManager : AudioManager
    - velocidadJugador : GameObject
    - velocidadEnemigo : GameObject
    - tu : SpriteRenderer
    - partida : ControladorPartida
    - sistemaCaptura : SistemaCaptura
    - AtkType : Type
    - isAttaking : bool
    - isFinish : bool
    - salvaje : Pokemon
    - equipo : Equipo
    + IniciarCombate(controller:ControladorPartida, equipo:Equipo, salvaje:Pokemon, sistemaCaptura:SistemaCaptura, zonaBase:ZonaBase) : void
    + SetupBattle(tipoCombate:ZonaBase.tipoCombate) : void
    + CapturarPokemon() : void
    - CapturaCoroutine() : IEnumerator
    + GetAtkType() : void
    - MostrarVelocidadesYAtacar(velJugador:int, velEnemigo:int) : IEnumerator
    - MostrarVelocidades(velJugador:int, velEnemigo:int) : IEnumerator
    - TurnoCombate(jugadorPrimero:bool) : IEnumerator
    - TerminarCombate() : IEnumerator
    - TerminarCombateCapturado() : IEnumerator
    + {static} StringToType(tipo:string) : Type
    - TurnoJugador() : IEnumerator
    - TurnoEnemigo() : IEnumerator
    + DoDmg(tipo:Type, atacante:Pokemon, defensor:Pokemon) : bool
    + EnemyAtk() : Type
    - {static} <<readonly>> tablaTipos : Dictionary<Type, Dictionary<Type, float>>
    + {static} CalcularEfectividad(ataque:Type, defensa1:Type, defensa2:Type) : float
    - {static} GetMultiplier(ataque:Type, defensa:Type) : float
}
MonoBehaviour <|-- SistemaCombate
@enduml
